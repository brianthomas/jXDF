	
   Here is a short list (with some description) of the known bugs 
   within this package:

        - binary data not implemented (!!).

        - Makefile is NOT nmake (the W32 make utility) ready. Must currently compile
          each class "by hand" ugh. 

        - Dropping relationship node/object after output fed thru parser a second time.
          (relationship node not implemented yet??).

        - Log configuration doesnt appear to allow writing to System.err.

        - This may work, but it hasnt been specifically checked:
          When axisValues havent been specifically assigned, written data should
          show empty ones, rather than dropping them. For example, take a 1D array that
          is of size 3. The axis only has values assigned to dataCube indices 0, 2, therefore
          the output XML should look like:
          <axis>
             ...
             <value>one</value>
             <value></value>
             <value>three</value>
          </axis>
 
        - The Java DecimalFormat code for exponential fields has unfortunate behavior.
          There can be no maximum exponent size specified, this means that the width of
          the exponential after being formated may exceed the specified dataFormat width.
          Our present 'solution' is to trim fields that are too big. An example of how this
          may happen: negative exponents in the exponential format. We need to implement
          by hand our own exponential formatter code to fix this. 

        - Automatic Unique Id generation may fail when a later node has an id that matches
          a machine generated one on an earlier node. We need a final pass thru the Id 
          stacks to enforce uniqueness in objects (or better yet internal checking of ids to
          enforce unique id's between like nodes).

        - In part because there is no such animal as a ValueList object, the Reader cant
          resolve local attributes in id/idRef situations as per other objects w/ id's. This
          means that only whole drop-in replacement of ValueList is possible via id/idRef.
          Need to Fix? or remove Id/idref from valueList.

        - show we not allow repeatable attribute to apply to the recordterminator
          on string parsing (it only applies to delimiting characters right now;
          Question: how does the Perl package handle this?) 
   
        - Exponential formatting is *less than optimal* in Java. Using DecimalFormat
          results in rounding errors, for example, the following numbers:
          double data[] = { 1.01E-1, 3.001E5, -13.E-8, 1.021E3 };
	  using the following decimalFormat pattern: "#0.0E0;-0.0E0" 
	  print out as: .101E0, 30.0E4, -13E-8, 10.2E2

        - Treatment of XML comments (the stuff in an XML file that occurs between 
          the "<--" "-->").
          This information is currently dropped during the parsing of the XDF file.
          This would seem to be the correct thing to do; machine readable comments ought
          to be placed in an appropriate node, e.g. parameter, note or attribute
          (such as "description").

        - Clean up debugging messages. Improve and make consistent error messaging 
          within the package. Missing any Exception classes? 

        - If the user improperly specifies Axis sizes/values, the Reader will overwrite
          prior cells without warning. Better warning messages are needed.

        - Determination of the byte ordering is assumed to apply equally across 
          integers and floats. We have established that this is indeed the case for
          several archetectures, Intel, Sparc, Alpha and SGI, however, I dont know
          for a fact that this is uniformly true for ALL computer archetechures. 
          I list this as a bug simply to warn the user that this could be a major
          problem in the portability of binary data.
         
        - Another binary data issue: byte swapping can get you pretty far in terms 
          of portability, but even on the above machines the user should beware 
          contamination of data. One important issue: the interpreted value for underflow
          varies between archectures. Portability of your binary data is improved
          by avoiding such very small numbers (with magnitude < 1e-36 or so). 
          I am unaware of other constraints on portability of binary data, however,
          Im sure they exist. At this time, my recomendation is to _avoid the binary 
          data format_ if you worry at all about contaminated data (-b.t.).


