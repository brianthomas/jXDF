	

	Here is our list of "issues" that need to be solved..

	A list of things that have to be done before we could consider
	this package "FINAL". (Note however that development/coding of the 
	0.17 version of the package is now frozen. All effort is now
        being made on the 0.20 version. These issues will be resolved with
        that code.) 
        ------------------------------------------------------------

	- add logarithm attribute to Units class (per new DTD).

        - UTF16 not implemented (at least not checked, reading *may* work).

        - unique axisId's are not enforced, but should be.

        - resolve issue with writing float/exponential data (e.g. the "-.9" to
  	  "-0.9" issue. Does Java XDF have this problem?)

        - Clean up debugging messages. Improve and make consistent error messaging
          within the package. Missing any Exception classes?

        - Interface for setting relation roles in Field is cumbersome. Is a 
          separate FIeldRelationship object needed? Do we really need to set
          it?

        - Handle Href's other than to files (URL's, socket?)
          check treatment of other types of hrefs, such as pointing to 
          http (rather than a file) resource.

        - for all classes on all non-String Set attribute methods, do check 
          to insure item is within reasonable bounds (needed?).

        - set/get DataFormat methods on Array are confusing. Clear up meanings between these
          methods and getDataFormatList().

        - Remove Perl junk in documentation. Improve the content of the doc text.

        - Need to implement a shadow array for precision on numbers within the dataCube.
          setData may adjust precision to be *lower* than declared in the relevant
          dataFormat object but may *never* insert a number with *higher* precision than
          currently exists in the dataCube. Need a arrayObj.getPrecision(locator) method
          to identify precision on each cell.
      
        - Lots of inefficiencies in the code, synchronized blocks, SPecification calls
          for PrettyOutput. Check dataCube access.

	- Improve efficiency of data reading. Direct char->number converstion
	  (faster) rather than convert to String, then to a number object,
          then to a primative (in SaxDocumentHandler:addData.. private method).

	- Correct Notes/Location attribute maddness. Notes should carry around
	  locator object ref's rather than nasty space delimited strings.

	- Treatment of special characters (like NEWLINE) should be entities 
          (&newline;) in element attributes of output XML (this causes a problem
          with being able to re-load delimited case data w/ newline recordterminators). 
          But note one problem with this is that by definition, &newLine; is converted 
          to a space by all XML parsers (!!).
	  For the time being this is solved by having a special function, writeOutAttribute,
	  handle the writing of attributes in output XML. This funct. basically 
	  looks at the value string of the attribute character by character and
	  converts newline/carriageReturns into &#010; and &#013; entities respectively. 
          This is a slow solution, but it works. Isnt there something better?

	- Make methods/classes as consistent as possible with Perl package.

        - the XML declaration hash doesnt allow user to declare the XML version;
          (partly because XMLDecl Hashtable is not an orderd object, and we cant
           insure that "version" will be the first attribute (and why this needs
	   to be is difficult for me to understand, but thats another matter..).
	   ) so we need to review if current implementation is correct.

	- Check synchronization issues on all code (develop threaded tests) 
          (or, as mentioned above, lunk threaded code and remove sync blocks)

        - IO Speed is still fairly slow (although about factor of ~ 10 faster than Perl).
          Reading in is faster than output, Java XDF is able to load ~ 13,000 records/sec 
          and write ~3000 records/sec on 400 MHz machine.

        - Need Code review, issues:
	    1. Remove unnecessary methods like setDimension, etc.

	- Version control for the Reader. Check that we have right DTD for software.


        Things for the next big version upgrade to XDF version 0.20
        ============================================================

	- Allow for uneven precision in data. 

	- Overflow, Underflow, NaN issues for data. Define what does "null" cell really mean?.

        - Append functionality on Arrays needs to be implemented.

	- MathML units.

        - implement buffered IO of data for better performance.

        - placement of parameter objects under more classes (e.x. axis, field)

	- XDF functions (append, merge, and sort and sub-select arrays in particular).

	- Face up to the setData/dataFormat issue. What happens when a user
          sets the first data? Check that it conforms to the declared dataFormat
	  before allocating the primitive array that will hold the datum.


        Longer term issues
        ==================

        - Making the package compile on W32 machines using nmake.

        - Have consistent erroring. Should throw errors wherever reasonable rather 
          than print warning messages. Also, Clean up debugging messages. 
          Are we missing any Exception classes? 

        - Large datasets. When to automatically switch to persistent dataCube 
          How much memory to use, efficiency issues. Native code alternative to
          Java (?).

	- Internal directory of user-defined parameters. Allow applications always
	  a way of finding the science parameters/keywords even if XDF parameter
          isnt used to hold the information.

	- use of offset reading to allow XDF to wrap complex binary/ascii data file(s).

	- explore holding recursive datastructures? Ex. FITS BINTABLE, b-trees, etc.

        - Id/IdRef stuff is implemented by cloning the object refered to. This works
          ok, however, results in expanded object, writes back out expanded file.
          Review possible solutions to "recompress" like objects.

        - treatment of the XDF object as a (mini-)database. Holding b-,r-tree structures. 



