	

	Here is our list of "issues" that need to be solved..


	A list of things that have to be done before we can consider
	this package "BETA"
        ------------------------------------------------------------

	- Impliment octal/hex data read/write in SaxDocHandler.

	- Impliment binary data read/write in SaxDocHandler/Binary*DataFormats.

        - Dropping relationship after output fed thru parser a second time.

        - readId/readIdRef not quite working, looks like deep clone issue with/DataIOStyle class.

        - check that notesEndElementHandlerFunc is finished (?)

	- always use constants (sPCDATAAttribute = "value") 

	- if the attribute is primitive number, *get* function overloading, two
 	 *set* functions--one returning primitive number, one returning Number object

	- Check this: Do we update all derived locators when axis is add/removed from an array?

        - Remove Perl junk in documentation. Improve the content of the doc text.

        - set/get DataFormat methods on Array are confusing. Clear up meanings between these
          methods and getDataFormatList().

        - for all classes on all non-String Set attribute methods, do check 
          to insure item is within reasonable bounds.


	A list of things that have to be done before we can consider
	this package "FINAL"
        ------------------------------------------------------------

        - show we not allow repeatable attribute to apply to the recordterminator
          on string parsing (it only applies to delimiting characters right now;
          Question: how does the Perl package handle this?) 
   
	- Improve efficiency of data reading. Direct char->number converstion
	  (faster) rather than convert to String, then to a number object,
          then to a primative (in SaxDocumentHandler:addData.. private method).

	- Correct Notes/Location attribute maddness. Notes should carry around
	  locator object ref's rather than nasty space delimited strings.

	- Treatment of special characters (like NEWLINE) should be entities 
          (&newline;) in element attributes of output XML (this causes a problem
          with being able to re-load delimited case data w/ newline recordterminators). 
          [Note: this will probably be solved by putting delimiter info into CDATA section] 

        - Need to examine bufferedIO. The claim is that this will speed IO
          operations up for large arrays.

	- Make methods/classes as consistent as possible with Perl package.

        - Exponential formatting is *less than optimal* in Java. Using DecimalFormat
          results in rounding errors, for example, the following numbers:
          double data[] = { 1.01E-1, 3.001E5, -13.E-8, 1.021E3 };
	  using the following decimalFormat pattern: "#0.0E0;-0.0E0" 
	  print out as: .101E0, 30.0E4, -13E-8, 10.2E2

        - the XML declaration hash doesnt allow user to declare the XML version;
          (partly because XMLDecl Hashtable is not an orderd object, and we cant
           insure that "version" will be the first attribute (and why this needs
	   to be is difficult for me to understand, but thats another matter..).
	   ) so we need to review if current implementation is correct.

	- Check synchronization issues on all code (develop threaded tests). 

        - Need Code review, issues:
            1. Are Utility, Constants (and other) classes truely independant? 
               Shunt methods to places they are used.
	    2. Remove unnecessary methods like setDimension, etc.

	- Overflow, Underflow, NaN issues for data. Define what does "null" cell really mean?.


        Things for the next big version upgrade to XDF version 0.19
        ============================================================

	- Allow for uneven precision in data. 

        - Append functionality on Arrays needs to be implemented.

	- MathML units.

        - placement of parameter objects under more classes (e.x. axis, field)

	- XDF functions.

	- Face up to the setData/dataFormat problem. What happens when a user
          sets the first data? Check that it conforms to the declared dataFormat
	  before allocating the primitive array that will hold the datum.


        Longer term issues
        ==================

        - Making the package compile on W32 machines using nmake.

        - Clean up debugging messages. Improve and make consistent error messaging 
          within the package. Missing any Exception classes? 

        - Large datasets. When to automatically switch to persistent dataCube 
          How much memory to use, efficiency issues. Native code alternative to
          Java (?).

	- Internal directory of user-defined parameters. Allow applications always
	  a way of finding the science parameters/keywords even if XDF parameter
          isnt used to hold the information.

	- use of offset reading to allow XDF to wrap complex binary/ascii data file(s).

	- explore holding recursive datastructures? Ex. FITS BINTABLE, b-trees, etc.

        - Id/IdRef stuff is implemented by cloning the object refered to. This works
          ok, however, results in expanded object, writes back out expanded file.
          Review possible solutions to "recompress" like objects.



